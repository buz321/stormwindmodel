// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// degrees_to_radiansC
Rcpp::NumericVector degrees_to_radiansC(Rcpp::NumericVector degrees);
RcppExport SEXP _stormwindmodel_degrees_to_radiansC(SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(degrees_to_radiansC(degrees));
    return rcpp_result_gen;
END_RCPP
}
// radians_to_degreesC
Rcpp::NumericVector radians_to_degreesC(Rcpp::NumericVector radians);
RcppExport SEXP _stormwindmodel_radians_to_degreesC(SEXP radiansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type radians(radiansSEXP);
    rcpp_result_gen = Rcpp::wrap(radians_to_degreesC(radians));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stormwindmodel_degrees_to_radiansC", (DL_FUNC) &_stormwindmodel_degrees_to_radiansC, 1},
    {"_stormwindmodel_radians_to_degreesC", (DL_FUNC) &_stormwindmodel_radians_to_degreesC, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_stormwindmodel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
